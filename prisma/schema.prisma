// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  posts     Post[]
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Post {
  id              Int        @id @default(autoincrement())
  title           String     @db.Text
  subtitle        String?    @db.Text
  content         String     @db.Text
  published       Boolean    @default(false)
  urlSlug         String     @db.Text
  porttrait       String     @db.Text
  author          User       @relation(fields: [authorId], references: [id])
  authorId        Int
  categories      CategoryOnPost[]
  tags            TagsOnPost[]
  metaDescription String?    @db.Text
  metaKeywords    String?    @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deleted         Boolean    @default(false)
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  posts     CategoryOnPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Tags {
  id        Int      @id @default(autoincrement())
  name      String
  posts     TagsOnPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}


model CategoryOnPost {
  postId    Int
  categoryId Int
  post      Post @relation(fields: [postId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
  @@map("_CategoryOnPost")
}

model TagsOnPost {
  postId Int
  tagsId Int
  post   Post @relation(fields: [postId], references: [id])
  tags   Tags @relation(fields: [tagsId], references: [id])

  @@id([postId, tagsId])
  @@map("_TagsOnPost")
}